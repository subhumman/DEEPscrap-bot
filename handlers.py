from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.types import CallbackQuery
from keyboards import get_main_keyboard, get_services_keyboard, get_contact_keyboard
from parser import MetalParser
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä
parser = MetalParser()

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    logger.info(f"User {message.from_user.id} started the bot")
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–Ø –±–æ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å–ª—É–≥–∞—Ö –∏ —Ü–µ–Ω–∞—Ö.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/services - —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥\n"
        "/prices - —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã",
        reply_markup=get_main_keyboard()
    )

@router.message(Command("services"))
async def cmd_services(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /services
    """
    logger.info(f"User {message.from_user.id} requested services list")
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
        services = await parser.get_cached_services()
        logger.info(f"Retrieved {len(services) if services else 0} services")
        
        if not services:
            logger.warning("No services found")
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
            return

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏
        keyboard = get_services_keyboard(services)
        await message.answer(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in cmd_services: {str(e)}", exc_info=True)
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_main_keyboard()
        )

@router.callback_query(F.data.startswith('service_'))
async def process_service_callback(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
    """
    service_name = callback_query.data.replace('service_', '')
    logger.info(f"User {callback_query.from_user.id} selected service: {service_name}")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ä–µ–¥–Ω—é—é —Ü–µ–Ω—É
        avg_price = await parser.get_average_price(service_name)
        logger.info(f"Retrieved average price for {service_name}: {avg_price}")
        
        if avg_price:
            await callback_query.message.edit_text(
                f"üí∞ –°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –¥–ª—è —É—Å–ª—É–≥–∏ '{service_name}':\n"
                f"{avg_price:.2f} —Ä—É–±.",
                reply_markup=get_contact_keyboard()
            )
        else:
            logger.warning(f"No price found for service: {service_name}")
            await callback_query.message.edit_text(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è —É—Å–ª—É–≥–∏ '{service_name}'",
                reply_markup=get_contact_keyboard()
            )
    except Exception as e:
        logger.error(f"Error in process_service_callback: {str(e)}", exc_info=True)
        await callback_query.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_contact_keyboard()
        )
    finally:
        await callback_query.answer()

@router.callback_query(F.data == 'back_to_services')
async def process_back_callback(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —É—Å–ª—É–≥
    """
    logger.info(f"User {callback_query.from_user.id} returned to services list")
    try:
        services = await parser.get_cached_services()
        if not services:
            logger.warning("No services found when returning to list")
            await callback_query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
            return

        keyboard = get_services_keyboard(services)
        await callback_query.message.edit_text(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in process_back_callback: {str(e)}", exc_info=True)
        await callback_query.message.edit_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_main_keyboard()
        )
    finally:
        await callback_query.answer()

@router.message(Command("prices"))
async def cmd_prices(message: types.Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /prices
    """
    logger.info(f"User {message.from_user.id} requested prices")
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∏ —Ü–µ–Ω
        services = await parser.get_cached_services()
        logger.info(f"Retrieved {len(services) if services else 0} services for prices")
        
        if not services:
            logger.warning("No services found for prices")
            await message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_keyboard()
            )
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–∞–º–∏
        prices_text = "üìä –¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:\n\n"
        for service_name in services:
            avg_price = await parser.get_average_price(service_name)
            if avg_price:
                prices_text += f"{service_name}: {avg_price:.2f} —Ä—É–±.\n"
                logger.info(f"Added price for {service_name}: {avg_price}")

        await message.answer(
            prices_text,
            reply_markup=get_main_keyboard()
        )
    except Exception as e:
        logger.error(f"Error in cmd_prices: {str(e)}", exc_info=True)
        await message.answer(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}",
            reply_markup=get_main_keyboard()
        ) 