from aiogram import Bot, Router, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery
import logging

import keyboards as kb
from database import get_all_categories, get_category_details
from config import config

logger = logging.getLogger(__name__)

router = Router()

# ---------------- FSM States -----------------
class CalculationStates(StatesGroup):
    waiting_for_meters = State()
    waiting_for_date = State()

# ---------------- Handlers -------------------

# /start command
@router.message(CommandStart())
async def cmd_start(message: types.Message):
    text = (
        "<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ –º–µ—Ç–∞–ª–ª–∞!</b>\n\n"
        "–ú—ã ‚Äì –Ω–∞–¥–µ–∂–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫ –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–∫–∞—Ç–∞. "
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª."
    )
    await message.answer(text, reply_markup=kb.get_main_menu_keyboard())

# Main menu callback
@router.callback_query(F.data == "main_menu")
async def cq_main_menu(callback: CallbackQuery):
    text = (
        "<b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª."
    )
    await callback.message.edit_text(text, reply_markup=kb.get_main_menu_keyboard())
    await callback.answer()

# Show categories
@router.callback_query(F.data == "show_categories")
async def cq_show_categories(callback: CallbackQuery):
    if not get_all_categories():
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)
        return
    text = "<b>–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
    await callback.message.edit_text(text, reply_markup=kb.get_categories_keyboard())
    await callback.answer()

# Category details
@router.callback_query(F.data.startswith("category_"))
async def cq_category_details(callback: CallbackQuery):
    category_id = int(callback.data.split("_")[1])
    details = get_category_details(category_id)
    if not details:
        await callback.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
        return
    text = (
        f"<b>{details['name']}</b>\n\n"
        f"–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞ –∑–∞ —Ç–æ–Ω–Ω—É: <b>{details['average_price']:,} —Ä—É–±.</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞."
    )
    await callback.message.edit_text(text, reply_markup=kb.get_category_details_keyboard(category_id))
    await callback.answer()

# Start calculation
@router.callback_query(F.data.startswith("calculate_"))
async def cq_start_calculation(callback: CallbackQuery, state: FSMContext):
    category_id = int(callback.data.split("_")[1])
    await state.set_state(CalculationStates.waiting_for_meters)
    await state.update_data(category_id=category_id)
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Ç—Ä–æ–≤:", reply_markup=kb.get_calculator_keyboard())
    await callback.answer()

# Process meters
@router.message(CalculationStates.waiting_for_meters)
async def process_meters(message: types.Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0.")
        return
    await state.update_data(meters=int(message.text))
    await state.set_state(CalculationStates.waiting_for_date)
    await message.answer("–ö–æ–≥–¥–∞ –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∞? (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–∑–∞–≤—Ç—Ä–∞', '–≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏')")

# Process date and finish
@router.message(CalculationStates.waiting_for_date)
async def process_date(message: types.Message, state: FSMContext, bot: Bot):
    await state.update_data(delivery_date=message.text)
    data = await state.get_data()
    await state.clear()

    category_id = data.get("category_id")
    meters = data.get("meters")
    delivery_date = data.get("delivery_date")

    details = get_category_details(category_id)
    if not details:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.")
        return

    # Simple weight assumption ‚Äì this should be replaced with real data
    weight_per_meter_kg = 10
    total_weight_ton = meters * weight_per_meter_kg / 1000
    total_cost = total_weight_ton * details["average_price"]

    # Notify manager
    manager_text = (
        f"<b>üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
        f"<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @{message.from_user.username} (ID: {message.from_user.id})\n"
        f"<b>–¢–æ–≤–∞—Ä:</b> {details['name']}\n"
        f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {meters} –º\n"
        f"<b>–ü—Ä–∏–º–µ—Ä–Ω—ã–π –≤–µ—Å:</b> {total_weight_ton:.2f} —Ç\n"
        f"<b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_cost:,.2f} —Ä—É–±.\n"
        f"<b>–°—Ä–æ–∫ –ø–æ—Å—Ç–∞–≤–∫–∏:</b> {delivery_date}"
    )
    try:
        await bot.send_message(config.MANAGER_CHANNEL_ID, manager_text)
    except Exception as e:
        logger.error(f"Failed to send message to manager channel: {e}")

    # Reply to user
    user_text = (
        f"<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!</b>\n\n"
        f"<b>–¢–æ–≤–∞—Ä:</b> {details['name']}\n"
        f"<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {meters} –º\n"
        f"<b>–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å:</b> {total_cost:,.2f} —Ä—É–±.\n\n"
        "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
    )
    await message.answer(user_text, reply_markup=kb.get_main_menu_keyboard())

# Contact manager
@router.callback_query(F.data == "contact_manager")
async def cq_contact_manager(callback: CallbackQuery, bot: Bot):
    user = callback.from_user
    manager_text = (
        f"<b>üìû –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–≤—è–∑—å</b>\n\n"
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user.username} (ID: {user.id}) –ø—Ä–æ—Å–∏—Ç —Å–≤—è–∑–∞—Ç—å—Å—è."
    )
    try:
        await bot.send_message(config.MANAGER_CHANNEL_ID, manager_text)
        await callback.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.", show_alert=True)
    except Exception as e:
        logger.error(f"Failed to send contact request: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True) 